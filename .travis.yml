language:
  - cpp
sudo: required
matrix:
  include:
    - os: linux
      env:
        - MATRIX_EVAL="sudo apt update && sudo apt install libxrandr-dev libxcursor-dev libxcb-xkb-dev libxinerama-dev libxi-dev" DEPLOY_BUILD="y" FIPS_CONFIG="linux-make-release"
      addons:
        apt:
          sources:
            - boost-latest
          packages:
            - libboost-all-dev
    - os: linux
      env:
        - FIPS_CONFIG="emsc-make-debug" SETUP="docker pull ubuntu:16.04" DEPLOY_BUILD="n" EMSCRIPTEN="1"
      addons:
        apt:
          sources:
            - boost-latest
          packages:
            - libboost-all-dev
    - os: linux
      env:
        - FIPS_CONFIG="emsc-make-release" SETUP="docker pull ubuntu:16.04" DEPLOY_BUILD="y" EMSCRIPTEN="1"
      addons:
        apt:
          sources:
            - boost-latest
          packages:
            - libboost-all-dev
    - os: linux
      env:
        - FIPS_CONFIG="wasm-make-debug" SETUP="docker pull ubuntu:16.04" DEPLOY_BUILD="n" EMSCRIPTEN="1"
      addons:
        apt:
          sources:
            - boost-latest
          packages:
            - libboost-all-dev
    - os: linux
      addons:
        apt:
          sources:
            - boost-latest
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - libboost-all-dev
      env:
        - MATRIX_EVAL="sudo apt update && sudo apt install libxrandr-dev libxcursor-dev libxcb-xkb-dev libxinerama-dev libxi-dev && CC=gcc-6 && CXX=g++-6" DEPLOY_BUILD="n" FIPS_CONFIG="linux-make-release"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - boost-latest
          packages:
            - g++-7
            - libboost-all-dev
      env:
        - MATRIX_EVAL="sudo apt update && sudo apt install libxrandr-dev libxcursor-dev libxcb-xkb-dev libxinerama-dev libxi-dev && CC=gcc-7 && CXX=g++-7" DEPLOY_BUILD="n" FIPS_CONFIG="linux-make-release"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - boost-latest
          packages:
            - g++-8
            - libboost-all-dev
      env:
        - MATRIX_EVAL="sudo apt update && sudo apt install libxrandr-dev libxcursor-dev libxcb-xkb-dev libxinerama-dev libxi-dev && CC=gcc-8 && CXX=g++-8" DEPLOY_BUILD="n" FIPS_CONFIG="linux-make-release"
    #~ - os: osx
      #~ osx_image: xcode8
      #~ env:
        #~ - DEPLOY_BUILD="y" FIPS_CONFIG="osx-make-release" MATRIX_EVAL="rm fips-files/verbs/build*"
      #~ addons:
        #~ homebrew:
          #~ packages:
            #~ - python3
          #~ update: true

services:
  - docker
  
before_install:
  - sudo rm -rf /etc/apt/sources.list.d
  - if [[ $FIPS_CONFIG != osx-make-release ]]; then sudo apt install python3; fi
  - eval "${MATRIX_EVAL}"

install:
  - eval "${SETUP}"
  - ./fips set config ${FIPS_CONFIG}
  - git clone https://github.com/knightos/scas
  - cd scas
  - mkdir build
  - cd build
  - cmake .. && make -j8 && sudo make install
  - cd ../..
  - git clone https://github.com/knightos/kcc
  - cd kcc
  - mkdir build
  - cd build
  - cmake .. && make -j8 && sudo make install
  - cd ../..

script:
  - git config --global user.name Travis CI
  - git config --global user.email pleasantatk@gmail.com
  - pushd ..
  - git clone https://github.com/Zany80/BIOS
  - popd
  - make -C ../BIOS/ install DESTDIR=`pwd`/build
  - if [[ "$EMSCRIPTEN" != "1" ]]; then if ! ./fips build;then FIPS_CONFIG=failure-failure-failure;exit 1;fi;else if ! docker build -t zany80/zany80 .;then FIPS_CONFIG=failure-failure-failure;exit 2;fi;fi
  - if [[ "$EMSCRIPTEN" != "1" ]]; then ./fips make package;else if [[ "$DEPLOY_BUILD" == "y" ]];then docker run -e GITHUB_KEY Zany80/Zany80 bash -c "cd /root/Zany80;./fips publish";fi;fi

before_deploy:
  - git tag "$(./tools/get_version.sh)-$(git log --format=%h -1)" || true
  - export VERSION="$(./tools/get_version.sh)"
  - export MINIFIED_VERSION="${VERSION%.*}"
  - mkdir deploy
  - mv build/fips-build/Zany80/$FIPS_CONFIG/Zany80-$MINIFIED_VERSION* deploy/

deploy:
  provider: releases
  api_key: "$GITHUB_KEY"
  file_glob: true
  file: deploy/*
  skip_cleanup: true
  overwrite: true
  prerelease: true
  name: $VERSION
  on:
    condition:
      - $DEPLOY_BUILD = y
      - $EMSCRIPTEN != 1

branches:
  only:
    - master
